function [ net, best_val_perf, classif_rate ] = simple_test_6anns( x,y )
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here

    RandStream.setGlobalStream(RandStream('mt19937ar','seed',1)); 
    [x2, y2] = ANNdata(x,y);
    net = cell(1,6);
    tr = cell(1,6);
    total_best_val_perf = 0;
    data.train_examples = examples(train_start_index:train_end_index,:);
    data.train_targets = targets(train_start_index:train_end_index);
    train_end_index = round(size(1,x2)*66/100);
    train_examples = x2(:, 1:train_end_index);
    train_targets = y2(1:train_end_index);
    for i = 1:6
        net{i} = feedforwardnet([5,5],'trainlm');
        net{i}.layers{1}.transferFcn = 'tansig';    
        configure(net, train_examples, train_targest);
        net{i}.divideParam.trainRatio = 100/100;
        net{i}.divideParam.valRatio = 0;
        net{i}.divideParam.testRatio = 0;
        net.trainParam.min_grad = 1*(power(10,-4));
        [net{i}, tr{i}] = train(net, train_examples, train_targets);
    end
    predictions = testANN(net,x2(:,train_end_index:size(1,x2)));
    classification_rate = (size(y,1) - nnz(predictions - y))/size(y, 1); 
    
    for i = 1:6
    net{i} = feedforwardnet([5,5],'trainlm');
    net{i}.layers{1}.transferFcn = 'tansig';    
    configure(net, x2, y2);
    net{i}.divideParam.trainRatio = 66/100;
    net{i}.divideParam.valRatio = 33/100;
    net{i}.divideParam.testRatio = 0;
    net.trainParam.min_grad = 1*(power(10,-4));
    [net{i}, tr{i}] = train(net, x2, y2);
    total_best_val_perf = total_best_val_perf + tr{i}.best_vperf;
    end
    best_val_perf = total_best_val_perf / 6;
    
end

